// <auto-generated />
using System;
using AccountModuleInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountModule.Data.Migrations
{
    [DbContext(typeof(AccountModuleDbContext))]
    [Migration("20230705171403_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("AccountModuleCore.Entities.KnownAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsJokerFlag")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountModule");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownAccountProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KnownAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownAccountId");

                    b.ToTable("KnownAccountProfiles");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownAccountSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("KnownAccountSubscriptions");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StateCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentBusinessId");

                    b.ToTable("KnownBusinesses");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KnownBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessId");

                    b.ToTable("KnownBusinessProfiles");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("KnownBusinessId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessId");

                    b.ToTable("KnownBusinessWebsites");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsiteAlias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("KnownBusinessWebsiteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessWebsiteId");

                    b.ToTable("KnownBusinessWebsiteAliases");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsiteProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionDefault")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionDisabled")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionDisabledBackground")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AppbarBackground")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AppbarText")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Background")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundGrey")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Black")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body1FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body1FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Body1FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body1LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Body1LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("Body2FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Body2FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Body2FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body2LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Body2LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("ButtonFontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ButtonFontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ButtonFontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ButtonLetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("ButtonLineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("CaptionFontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CaptionFontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CaptionFontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaptionLetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("CaptionLineHeight")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultFontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultFontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultFontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultLetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("DefaultLineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("DefaultUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Divider")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DividerLight")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DrawerBackground")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DrawerIcon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DrawerText")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DrawerWidthLeft")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DrawerWidthRight")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H1FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H1FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H1FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H1LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H1LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("H2FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H2FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H2FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H2LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H2LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("H3FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H3FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H3FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H3LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H3LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("H4FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H4FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H4FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H4LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H4LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("H5FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H5FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H5FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H5LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H5LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("H6FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("H6FontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("H6FontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("H6LetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("H6LineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KnownBusinessWebsiteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LandingUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("LinesDefault")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LinesInputs")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoImage")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OverlineFontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OverlineFontSize")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OverlineFontWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OverlineLetterSpacing")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double?>("OverlineLineHeight")
                        .HasColumnType("REAL");

                    b.Property<string>("Primary")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RootFolder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Secondary")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Success")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surface")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TableLines")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextDisabled")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextPrimary")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextSecondary")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Warning")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessWebsiteId")
                        .IsUnique();

                    b.ToTable("KnownBusinessWebsiteProfile");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsJokerFlag")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAgreedToTOS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("KnownUsers");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KnownBusinessWebsiteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KnownUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessWebsiteId");

                    b.HasIndex("KnownUserId");

                    b.ToTable("KnownUserProfile");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.WebsitePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInNavigation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("KnownBusinessWebsiteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NavIcon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NavText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsitePageContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WebsiteParentPageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KnownBusinessWebsiteId");

                    b.HasIndex("WebsiteParentPageId");

                    b.ToTable("WebsitePages");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.WebsitePageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WebsitePageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WebsitePageId");

                    b.ToTable("WebsitePageContents");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownAccountProfile", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownAccount", "KnownAccount")
                        .WithMany("KnownAccountProfiles")
                        .HasForeignKey("KnownAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownAccount");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusiness", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusiness", "ParentBusiness")
                        .WithMany("ChildBusinesses")
                        .HasForeignKey("ParentBusinessId");

                    b.Navigation("ParentBusiness");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessProfile", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusiness", "KnownBusiness")
                        .WithMany("KnownBusinessProfiles")
                        .HasForeignKey("KnownBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownBusiness");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsite", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusiness", "KnownBusiness")
                        .WithMany("KnownBusinessWebsites")
                        .HasForeignKey("KnownBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownBusiness");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsiteAlias", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusinessWebsite", "KnownBusinessWebsite")
                        .WithMany("KnownBusinessWebsiteAliases")
                        .HasForeignKey("KnownBusinessWebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownBusinessWebsite");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsiteProfile", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusinessWebsite", "KnownBusinessWebsite")
                        .WithOne("KnownBusinessWebsiteProfile")
                        .HasForeignKey("AccountModuleCore.Entities.KnownBusinessWebsiteProfile", "KnownBusinessWebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownBusinessWebsite");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownUserProfile", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusinessWebsite", "KnownBusinessWebsite")
                        .WithMany()
                        .HasForeignKey("KnownBusinessWebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountModuleCore.Entities.KnownUser", "KnownUser")
                        .WithMany("KnownUserProfiles")
                        .HasForeignKey("KnownUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownBusinessWebsite");

                    b.Navigation("KnownUser");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.WebsitePage", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.KnownBusinessWebsite", "KnownBusinessWebsite")
                        .WithMany("WebsitePages")
                        .HasForeignKey("KnownBusinessWebsiteId");

                    b.HasOne("AccountModuleCore.Entities.WebsitePage", "WebsiteParentPage")
                        .WithMany("WebsiteChildPages")
                        .HasForeignKey("WebsiteParentPageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("KnownBusinessWebsite");

                    b.Navigation("WebsiteParentPage");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.WebsitePageContent", b =>
                {
                    b.HasOne("AccountModuleCore.Entities.WebsitePage", "WebsitePage")
                        .WithMany("WebsitePageContents")
                        .HasForeignKey("WebsitePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebsitePage");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownAccount", b =>
                {
                    b.Navigation("KnownAccountProfiles");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusiness", b =>
                {
                    b.Navigation("ChildBusinesses");

                    b.Navigation("KnownBusinessProfiles");

                    b.Navigation("KnownBusinessWebsites");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownBusinessWebsite", b =>
                {
                    b.Navigation("KnownBusinessWebsiteAliases");

                    b.Navigation("KnownBusinessWebsiteProfile")
                        .IsRequired();

                    b.Navigation("WebsitePages");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.KnownUser", b =>
                {
                    b.Navigation("KnownUserProfiles");
                });

            modelBuilder.Entity("AccountModuleCore.Entities.WebsitePage", b =>
                {
                    b.Navigation("WebsiteChildPages");

                    b.Navigation("WebsitePageContents");
                });
#pragma warning restore 612, 618
        }
    }
}
