@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>


<MudLayout>
    <MudAppBar Elevation="1" Dense="true" Color="Color.Success">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <span>Toggle @(_isDarkMode ? "Light Mode" : "Dark Mode")</span>
        <MudToggleIconButton @bind-Toggled="@_isDarkMode" 
            Icon="@Icons.Material.Filled.DarkMode" Color="@Color.Dark" Title="Dark Mode"
            ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Warning" ToggledTitle="Light Mode"
        />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => Testing())" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" DisableOverlay="false" Elevation="2" Variant="@DrawerVariant.Mini">
        <NavMenu /> 
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
    void Testing()
    {
        Console.WriteLine("Clicked the ellipses");
    }
}