@inject Microsoft.Extensions.Localization.IStringLocalizer<ParticipateHostComponent> Localize
<MudGrid>
    <MudItem xs="12" sm="12" md="12" Class="py-2 mb-3">
        <MudSelect T="string" SelectedValues="@SelectValue" Placeholder="Select Room Behavior" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="@( (string s) => setToModule(s))">
            @foreach(var item in moduleList){
                <MudSelectItem Value=@item.Value AdornmentIcon=@item.AdornmentIcon Style=@item.Style />
            }
        </MudSelect>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string roomName { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<MudSelectItemModel> moduleList = new();
    public HashSet<string> SelectValue { get; set; } = new();
    protected string userName;
    private Guid _userId;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var isAuthenticated = user.Identity.IsAuthenticated;
        
        if (isAuthenticated)
        {
            _userId = new Guid(user.FindFirst(c => c.Type == "sub")?.Value);
        }
        
        var currentMode = NavigationManager.Uri.Split("/").LastOrDefault();
        
        if (FeatureFlags.FeatureUIKit == true) {
            var item = new MudSelectItemModel {  Value="UI Kit", AdornmentIcon=Icons.Material.Filled.Drafts, Style="color: white;", Tag="uikit" };
            item.IsSelected = currentMode.ToLower() == item.Tag.ToLower();
            moduleList.Add(item);           
        }
        
        var highlevelSelectedFound = moduleList.FirstOrDefault(rs=>rs.IsSelected==true);
        
        if(highlevelSelectedFound == null) {
            highlevelSelectedFound = moduleList.FirstOrDefault(rs=>rs.ValidPrefix != "" && currentMode.ToLower().Contains(rs.ValidPrefix.ToLower()));
        }

        if(highlevelSelectedFound != null) {
            SelectValue = new HashSet<string>(){ highlevelSelectedFound.Value };
        }
        
        await base.OnInitializedAsync();
    }
    protected async Task setToModule(string module)
    {
        var moduleValue = moduleList.FirstOrDefault(rs => rs.Value == module).Tag;
        
    }    
}