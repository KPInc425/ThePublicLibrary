@using System.Reflection
@inject IStringLocalizer<ProgramHostNavMenu> Localize
<div>
    <MudAppBar Class="py-0" Fixed="true" Bottom="false">
        <a href="/" class="navmenu-logo">
            <img src=@($"/i{PlatformCacheService.KnownBusinessWebsite.KnownBusinessWebsiteProfile.LogoImage}")
                width="160" alt="" class="mt-2" />
        </a>
        @foreach (var menuItem in MenuItems.Where(rs => rs.IsInNavigation == true))
        {
            @if (menuItem.IsVirtual)
            {
                <MudNavLink Class="mx-4" Color="@Color.Secondary" Icon="@GetIconValue(@menuItem.NavIcon)"
            Href="@menuItem.WebPageUrl" Underline="@(UnderlineBehavior(menuItem))"
            OnClick="()=>NavigateToPage(menuItem.WebPageUrl)">
                    @menuItem.NavText</MudNavLink>
            }
            else
            {
                <MudNavLink Class="mx-4" Color="@Color.Secondary" Icon="@GetIconValue(@menuItem.NavIcon)"
            Href=@($"/page/{menuItem.WebPageUrlPageOnly}") Underline="@(UnderlineBehavior(menuItem))"
            OnClick="()=>NavigateToPage(menuItem.WebPageUrl)">
                    @menuItem.NavText</MudNavLink>
            }
        }
        <MudSpacer />
        <SuperAdminNavMenu Class="mx-1" />
        <NavMenuAccount Class="mx-1" />
        <NavMenuLogIn Class="mx-1" />
    </MudAppBar>
    @if (SelectedItem != null && ((SelectedItem?.WebsiteChildPages?.Count ?? 0) > 0))
    {
        <MudContainer>
            <div class="sub-menu">
                @foreach (var menuItem in SelectedItem?.WebsiteChildPages)
                {
                    @if (menuItem.IsVirtual)
                    {
                        <MudButton class="sub-menu-item px-1" OnClick="()=>NavigateToPage(menuItem.WebPageUrl)">@menuItem.NavText
                        </MudButton>
                    }
                    else
                    {
                        <MudButton class="sub-menu-item px-1" OnClick="()=>NavigateToStaticPage(menuItem.WebPageUrlPageOnly)">
                            @menuItem.NavText</MudButton>
                    }
                }
            </div>
        </MudContainer>
    }
</div>
@code {
    [Parameter] public EventCallback ToggleNav { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    List<WebsitePageViewModel> MenuItems { get; set; }
    WebsitePageViewModel SelectedItem { get; set; } = new();
    private Underline UnderlineBehavior(WebsitePageViewModel item)
    {
        if (SelectedItem != null && SelectedItem.NavText != null && item.NavText == SelectedItem.NavText)
        {
            return Underline.Always;
        }
        else
        {
            return Underline.Hover;
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            PlatformCacheService.OnMenuChange += RedrawMenu;
        }
        base.OnAfterRender(firstRender);
    }
    protected override void OnInitialized()
    {
        InitPage();
        base.OnInitialized();
    }
    private void RedrawMenu()
    {
        Console.WriteLine("Redrawing Updated Menu");
        InitPage();
        StateHasChanged();
    }
    private void InitPage()
    {
        MenuItems = GetMenuItems();
        SelectedItem = MenuItems.Find(item => CompareCurrentPageUrl(item.WebPageUrl));
        Console.WriteLine($"Selected item = {SelectedItem?.NavText}");
        @* if (SelectedItem == null)
            {
            SelectedItem = MenuItems.Find(item => CompareCurrentPageUrl(item.WebsiteParentPage?.WebPageUrl));
            } *@
        if (SelectedItem == null)
        {
            SelectedItem = MenuItems.Find(item => item.WebsiteChildPages.Any(nestedItem =>
            CompareCurrentPageUrl(nestedItem.WebPageUrl)));
        }
    }
    public async Task NavigateToPage(string url)
    {
        NavigationManager.NavigateTo(url);
        await Task.Yield();
    }
    public async Task NavigateToStaticPage(string url)
    {
        NavigationManager.NavigateTo($"/page/{url}");
        await Task.Yield();
    }
    private bool CompareCurrentPageUrl(string urlToCompare)
    {
        return (
        NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length - 1)
        .Equals(urlToCompare, StringComparison.InvariantCultureIgnoreCase) ||
        NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length)
        .Equals(urlToCompare, StringComparison.InvariantCultureIgnoreCase)
        );
    }
    public async Task NavigateToPage(MenuItem item)
    {
        NavigationManager.NavigateTo(item.Url);
        await Task.Yield();
    }
    private List<WebsitePageViewModel> GetMenuItems()
    {
        var websiteMenu = PlatformCacheService.KnownBusinessWebsite.WebsitePages;
        return websiteMenu;
    }
    public static string GetIconValue(string iconName)
    {
        Type t = typeof(Icons.Filled);
        //var fs = t.GetFields(BindingFlags.Static | BindingFlags.Public);
        FieldInfo p = t.GetField(iconName);
        return p.GetValue(null).ToString();
    }
}