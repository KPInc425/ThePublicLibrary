# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]
        
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    #- name: Restore Core
    #  run: dotnet restore "./src/+Modules/Lazy/ThePublicLibrary/____Core/_TplCore/src/TplCore.csproj"      
    #- name: Build Core
    #  run: dotnet build "./src/+Modules/Lazy/ThePublicLibrary/____Core/_TplCore/src/TplCore.csproj"      
    - name: Run Core - Unit Tests
      run: dotnet test "./src/+Modules/Lazy/ThePublicLibrary/____Core/_TplCore.UnitTests/src/TplCore.UnitTests.csproj"
      
    #- name: Restore Infrastructure
    #  run: dotnet restore "./src/+Modules/Lazy/ThePublicLibrary/___Infrastructure/TplInfrastructure/src/TplInfrastructure.csproj"      
    #- name: Build Infrastructure
    #  run: dotnet build "./src/+Modules/Lazy/ThePublicLibrary/___Infrastructure/TplInfrastructure/src/TplInfrastructure.csproj"      
    - name: Run Infrastructure - Integration Tests
      run: dotnet test "./src/+Modules/Lazy/ThePublicLibrary/___Infrastructure/TplInfrastructure.IntegrationTests/src/TplInfrastructure.IntegrationTests.csproj"
    
    #- name: Restore Application
    #  run: dotnet restore "./src/+Modules/Lazy/ThePublicLibrary/_Application/TplApplication/src/TplApplication.csproj"      
    #- name: Build Application
    #  run: dotnet build "./src/+Modules/Lazy/ThePublicLibrary/_Application/TplApplication/src/TplApplication.csproj"      
    - name: Run Application - Feature Tests
      run: dotnet test "./src/+Modules/Lazy/ThePublicLibrary/_Application/TplApplication.FeatureTests/src/TplApplication.FeatureTests.csproj"
      
    #- name: Restore TplApi
    #  run: dotnet restore "./src/+Modules/Lazy/ThePublicLibrary/+API/API.TplApi/src/API.TplApi.csproj"      
    #- name: Build TplApi
    #  run: dotnet build "./src/+Modules/Lazy/ThePublicLibrary/+API/API.TplApi/src/API.TplApi.csproj"      
    - name: Run TplApi - Functional Tests
      run: dotnet test "./src/+Modules/Lazy/ThePublicLibrary/+Api/API.TplApi.FunctionalTests/src/API.TplApi.FunctionalTests.csproj"
      
    #- name: Restore UI.TplBlazorModule
    #  run: dotnet restore "./src/+Modules/Lazy/ThePublicLibrary/UI/UI.TplBlazorModule/src/UI.TplBlazorModule.csproj"      
    - name: Install Dart Sass Embedded
      run: npm i -g sass
    
    - name: Build UI.TplBlazorModule
      run: dotnet build "./src/+Modules/Lazy/ThePublicLibrary/UI/UI.TplBlazorModule/src/UI.TplBlazorModule.csproj"
    
    - name: Build Fernweh.UI.BlazorClient
      run: dotnet build "./src/UI/Client/Fernweh.UI.BlazorClient/src/Fernweh.UI.BlazorClient.csproj"
      
    - name: Build Fernweh.UI.BlazorClient - bUnit Tests
      run: dotnet build "./src/UI/Client/Fernweh.UI.BlazorClient.UIUnitTests/src/Fernweh.UI.BlazorClient.UIUnitTests.csproj"
    - name: Check code coverage
      uses: codecov/codecov-action@v3
      with:
          token: ${{ secrets.CODEC_TK }}

    #- name: Prettify code
    #  uses: creyD/prettier_action@v4.2
   
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SON_TK }}
        
    - name: Test Reporter
      uses: dorny/test-reporter@v1.6.0

