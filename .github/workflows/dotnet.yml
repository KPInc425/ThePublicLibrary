# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]
        
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    #- name: Restore Core
    #  run: dotnet restore "./src/+Modules/Required/ThePublicLibrary/____Core/_TPL.Core/src/TPL.Core.csproj"      
    #- name: Build Core
    #  run: dotnet build "./src/+Modules/Required/ThePublicLibrary/____Core/_TPL.Core/src/TPL.Core.csproj"      
    - name: Run Core - Unit Tests
      run: dotnet test "./src/+Modules/Required/ThePublicLibrary/____Core/_TPL.Core.UnitTests/src/TPL.Core.UnitTests.csproj"
      
    #- name: Restore Infrastructure
    #  run: dotnet restore "./src/+Modules/Required/ThePublicLibrary/___Infrastructure/TPL.Infrastructure/src/TPL.Infrastructure.csproj"      
    #- name: Build Infrastructure
    #  run: dotnet build "./src/+Modules/Required/ThePublicLibrary/___Infrastructure/TPL.Infrastructure/src/TPL.Infrastructure.csproj"      
    - name: Run Infrastructure - Integration Tests
      run: dotnet test "./src/+Modules/Required/ThePublicLibrary/___Infrastructure/TPL.Infrastructure.IntegrationTests/src/TPL.Infrastructure.IntegrationTests.csproj"
    
    #- name: Restore Application
    #  run: dotnet restore "./src/+Modules/Required/ThePublicLibrary/_Application/TPL.Application/src/TPL.Application.csproj"      
    #- name: Build Application
    #  run: dotnet build "./src/+Modules/Required/ThePublicLibrary/_Application/TPL.Application/src/TPL.Application.csproj"      
    - name: Run Application - Feature Tests
      run: dotnet test "./src/+Modules/Required/ThePublicLibrary/_Application/TPL.Application.FeatureTests/src/TPL.Application.FeatureTests.csproj"
      
    #- name: Restore PrimaryApi
    #  run: dotnet restore "./src/+Modules/Required/ThePublicLibrary/+API/TPL.API.PrimaryApi/src/TPL.API.PrimaryApi.csproj"      
    #- name: Build PrimaryApi
    #  run: dotnet build "./src/+Modules/Required/ThePublicLibrary/+API/TPL.API.PrimaryApi/src/TPL.API.PrimaryApi.csproj"      
    - name: Run PrimaryApi - Functional Tests
      run: dotnet test "./src/+Modules/Required/ThePublicLibrary/+Api/TPL.API.PrimaryApi.FunctionalTests/src/TPL.API.PrimaryApi.FunctionalTests.csproj"
      
    #- name: Restore TPL.Primary.BlazorModule
    #  run: dotnet restore "./src/+Modules/Required/ThePublicLibrary/UI/TPL.Primary.BlazorModule/src/TPL.Primary.BlazorModule.csproj"      
    - name: Install Dart Sass Embedded
      run: npm i -g sass
    
    - name: Build TPL.Primary.BlazorModule
      run: dotnet build "./src/+Modules/Required/ThePublicLibrary/UI/TPL.Primary.BlazorModule/src/TPL.Primary.BlazorModule.csproj"
    - name: Build TPL.UI.BlazorClient
      run: dotnet build "./src/UI/Client/TPL.UI.BlazorClient/src/TPL.UI.BlazorClient.UI.csproj"
    - name: Build TPL.UI.BlazorClient - bUnit Tests
      run: dotnet build "./src/UI/Client/TPL.UI.BlazorClient.UIUnitTests/src/TPL.UI.BlazorClient.UIUnitTests.csproj"
        
